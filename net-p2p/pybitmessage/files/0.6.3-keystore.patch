diff --git a/setup.py b/setup.py
index 12670ed..962b2b3 100644
--- a/setup.py
+++ b/setup.py
@@ -129,6 +129,9 @@ if __name__ == "__main__":
                 'libmessaging ='
                 'pybitmessage.plugins.indicator_libmessaging [gir]'
             ],
+            'bitmessage.keystore': [
+                'gnomekeyring = pybitmessage.plugins.keystore_gnomekeyring'
+            ],
             # 'console_scripts': [
             #        'pybitmessage = pybitmessage.bitmessagemain:main'
             # ]
diff --git a/src/class_addressGenerator.py b/src/class_addressGenerator.py
index 2b99e39..eca2314 100644
--- a/src/class_addressGenerator.py
+++ b/src/class_addressGenerator.py
@@ -181,12 +181,11 @@ class addressGenerator(threading.Thread, StoppableThread):
                     nonceTrialsPerByte))
                 BMConfigParser().set(address, 'payloadlengthextrabytes', str(
                     payloadLengthExtraBytes))
-                BMConfigParser().set(
-                    address, 'privsigningkey', privSigningKeyWIF)
-                BMConfigParser().set(
-                    address, 'privencryptionkey', privEncryptionKeyWIF)
                 BMConfigParser().save()
 
+                shared.keystore.push_keys(
+                    address, (privEncryptionKeyWIF, privSigningKeyWIF))
+
                 # The API and the join and create Chan functionality
                 # both need information back from the address generator.
                 queues.apiAddressGeneratorReturnQueue.put(address)
diff --git a/src/class_singleWorker.py b/src/class_singleWorker.py
index c95d484..3b64aa0 100644
--- a/src/class_singleWorker.py
+++ b/src/class_singleWorker.py
@@ -171,16 +171,11 @@ class singleWorker(threading.Thread, StoppableThread):
         logger.info("Quitting...")
 
     def _getKeysForAddress(self, address):
-        privSigningKeyBase58 = BMConfigParser().get(
+        privSigningKeyHex = shared.keystore.fetch_key(
             address, 'privsigningkey')
-        privEncryptionKeyBase58 = BMConfigParser().get(
+        privEncryptionKeyHex = shared.keystore.fetch_key(
             address, 'privencryptionkey')
 
-        privSigningKeyHex = hexlify(shared.decodeWalletImportFormat(
-            privSigningKeyBase58))
-        privEncryptionKeyHex = hexlify(shared.decodeWalletImportFormat(
-            privEncryptionKeyBase58))
-
         # The \x04 on the beginning of the public keys are not sent.
         # This way there is only one acceptable way to encode
         # and send a public key.
diff --git a/src/plugins/keystore_gnomekeyring.py b/src/plugins/keystore_gnomekeyring.py
new file mode 100644
index 0000000..cdb3f52
--- /dev/null
+++ b/src/plugins/keystore_gnomekeyring.py
@@ -0,0 +1,72 @@
+# -*- coding: utf-8 -*-
+
+import gnomekeyring
+
+
+class GnomeKeystore(object):
+
+    def __init__(self, parent):
+        self.keyring = gnomekeyring.get_default_keyring_sync() or 'login'
+        self.parent = parent
+        try:
+            gnomekeyring.create_sync(self.keyring, None)
+        except gnomekeyring.AlreadyExistsError:
+            pass
+
+    def fetch(self, address, key_type):
+        try:
+            keys = gnomekeyring.find_items_sync(
+                gnomekeyring.ITEM_NETWORK_PASSWORD,
+                {'protocol': 'bitmessage',
+                 'address': address}
+            )[0].secret
+        except gnomekeyring.Error:
+            return
+
+        return keys.split(':')[
+            0 if key_type == 'privencryptionkey' else 1]
+
+    def push(self, address, keys):
+        update = self.fetch(address, 'privencryptionkey') is not None
+        try:
+            gnomekeyring.item_create_sync(
+                self.keyring,
+                gnomekeyring.ITEM_NETWORK_PASSWORD,
+                address,
+                {'protocol': 'bitmessage',
+                 'address': address},
+                ':'.join(keys), update
+            )
+        except (gnomekeyring.DeniedError, gnomekeyring.CancelledError):
+            pass
+
+    def _fetch_password(self):
+        try:
+            items = gnomekeyring.find_items_sync(
+                gnomekeyring.ITEM_GENERIC_SECRET,
+                {'pybitmessage': 1}
+            )
+            return items[0].secret
+        except gnomekeyring.Error:
+            pass
+
+    def _push_password(self, password):
+        update = self._fetch_password() is not None
+        try:
+            gnomekeyring.item_create_sync(
+                self.keyring,
+                gnomekeyring.ITEM_GENERIC_SECRET,
+                'PyBitmessage master password',
+                {'pybitmessage': 1}, password, update
+            )
+        except (gnomekeyring.DeniedError, gnomekeyring.CancelledError):
+            pass
+
+    def decrypt(self, data):
+        return self.parent._decrypt_AES_CFB(data, self._fetch_password())
+
+    def encrypt(self, data):
+        return self.parent._encrypt_AES_CFB(data, self._fetch_password())
+
+
+connect_plugin = GnomeKeystore
diff --git a/src/shared.py b/src/shared.py
index caf2476..90ec0dc 100644
--- a/src/shared.py
+++ b/src/shared.py
@@ -9,9 +9,10 @@ import threading
 import traceback
 import hashlib
 import subprocess
+import ConfigParser
 from struct import unpack
-from binascii import hexlify
-from pyelliptic import arithmetic
+from binascii import hexlify, unhexlify
+from pyelliptic import arithmetic, Cipher
 
 # Project imports.
 import protocol
@@ -27,6 +28,10 @@ from helper_sql import sqlQuery, sqlExecute
 from inventory import Inventory
 from queues import objectProcessorQueue
 
+try:
+    from plugins.plugin import get_plugin
+except ImportError:
+    get_plugin = False
 
 verbose = 1
 # This is obsolete with the change to protocol v3
@@ -141,6 +146,85 @@ def decodeWalletImportFormat(WIFstring):
     os._exit(0)
 
 
+class Keystore(object):
+    """
+        Class implementing common key storage workflow
+    """
+    def __init__(self):
+        self.config = BMConfigParser()
+        keysencrypted = self.config.getboolean(
+            'bitmessagesettings', 'keysencrypted')
+
+        def noop(key):
+            return key
+
+        self.fetch = self._get_key
+        self.push = self._set_keys
+        self.encrypt = self.decrypt = noop
+
+        try:
+            content, plugin = self.config.get(
+                'bitmessagesettings', 'keystore').split(':')
+            plugin = get_plugin('keystore', name=plugin)(self)
+        except (ConfigParser.NoOptionError, ValueError, TypeError):
+            plugin = None
+
+        if not plugin:
+            if keysencrypted:
+                logger.warning(
+                    'Key encryption plugin not found or unimplemented!')
+            return
+
+        try:
+            if content == 'password' and keysencrypted:
+                self.decrypt = plugin.decrypt
+                self.encrypt = plugin.encrypt
+            elif content == 'keys':
+                self.fetch = plugin.fetch
+                self.push = plugin.push
+        except AttributeError:
+            pass
+
+    def fetch_key(self, address, key_type='privencryptionkey'):
+        """Fetch address key of type key_type from keystore"""
+        try:
+            return hexlify(decodeWalletImportFormat(
+                self.decrypt(self.fetch(address, key_type))
+            ))
+        except TypeError:
+            pass  # handle in reloadMyAddressHashes etc
+
+    def push_keys(self, address, keys):
+        """Push the address keys in WIF into keystore"""
+        self.push(address, [self.encrypt(key) for key in keys])
+
+    def _get_key(self, address, key_type='privencryptionkey'):
+        return self.config.get(address, key_type)
+
+    def _set_keys(self, address, keys):
+        for key, key_type in zip(
+                keys, ('privencryptionkey', 'privsigningkey')):
+            self.config.set(address, key_type, key)
+        self.config.save()
+
+    # simmetric encryption from pyelliptic example:
+    # https://github.com/yann2192/pyelliptic
+    def _encrypt_AES_CFB(self, data, password):
+        nonce = Cipher.gen_IV('aes-256-cfb')
+        ctx = Cipher(password, nonce, 1, ciphername='aes-256-cfb')
+        encrypted = ctx.update(data)
+        encrypted += ctx.final()
+        return ':'.join(hexlify(i) for i in (encrypted, nonce))
+
+    def _decrypt_AES_CFB(self, data, password):
+        encrypted, nonce = [unhexlify(part) for part in data.split(':')]
+        ctx = Cipher(password, nonce, 0, ciphername='aes-256-cfb')
+        return ctx.ciphering(encrypted)
+
+
+keystore = Keystore()
+
+
 def reloadMyAddressHashes():
     logger.debug('reloading keys from keys.dat file')
     myECCryptorObjects.clear()
@@ -160,9 +244,7 @@ def reloadMyAddressHashes():
             if addressVersionNumber in (2, 3, 4):
                 # Returns a simple 32 bytes of information encoded
                 # in 64 Hex characters, or null if there was an error.
-                privEncryptionKey = hexlify(decodeWalletImportFormat(
-                    BMConfigParser().get(addressInKeysFile, 'privencryptionkey'))
-                )
+                privEncryptionKey = keystore.fetch_key(addressInKeysFile)
 
                 # It is 32 bytes encoded as 64 hex characters
                 if len(privEncryptionKey) == 64:
